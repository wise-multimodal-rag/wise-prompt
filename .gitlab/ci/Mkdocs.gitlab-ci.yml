stages:
  - build-and-push-mkdocs

variables:
  PAGES_BRANCH: pages
  # REPOSITORY_ACCESS_TOKEN (deploy token 발급 후 CI/CD variables에 등록하세요)
  REMOTE_REPOSITORY: "https://oauth2:$REPOSITORY_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"

test-mkdocs:
  image: python:3.9.13-slim
  stage: build-and-push-mkdocs
  before_script:
    - pip install -r docs/requirements.txt
  script:
    - cd docs
    - mkdocs build --verbose --site-dir test
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - changes:
      - app/**/*
      when: never
    - if: '$CI_MERGE_REQUEST_ID == null'
      changes:
        - docs/**/*

build-and-push-mkdocs:
  stage: build-and-push-mkdocs
  image: docker:stable
  services:
    - docker:dind
  before_script: []
  script:
    - export DOC_VERSION=$(cat ./docs/version.txt)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      docker build -f ./docs/Dockerfile \
      --build-arg GITLAB_USER_NAME=$GITLAB_USER_NAME \
      --build-arg GITLAB_USER_EMAIL=$GITLAB_USER_EMAIL \
      --build-arg REMOTE_REPOSITORY=$REMOTE_REPOSITORY \
      --build-arg CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH \
      --build-arg DOC_VERSION=$DOC_VERSION \
      -t $CI_REGISTRY_IMAGE/mkdocs:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/mkdocs:latest .
    - docker push $CI_REGISTRY_IMAGE/mkdocs:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/mkdocs:latest
  needs: []
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
      when: manual
    - changes:
      - app/**/*
      when: never
    - if: '$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == "main"'
      changes:
        - docs/**/*
      when: manual

pages:
  image: python:3.9.17-buster
  stage: build-and-push-mkdocs
  before_script:
    - pip install -r docs/requirements.txt
    - export DOC_VERSION=$(cat docs/version.txt)
    - echo "Document Version:" $DOC_VERSION
  script:
    # need to build (latest version mkdocs files)
    - git config --global user.name $GITLAB_USER_NAME
    - git config --global user.email $GITLAB_USER_EMAIL
    - git remote set-url origin $REMOTE_REPOSITORY
    # 최신 원격 pages branch 확인
    - git fetch origin --depth=1
    - |
      if git show-ref --quiet refs/remotes/origin/${PAGES_BRANCH}; then
        echo "Branch '${PAGES_BRANCH}' exists. Checking out..."
        git checkout -b ${PAGES_BRANCH} origin/${PAGES_BRANCH}
      fi
    # 최신 CI_COMMIT_BRANCH(mkdocs) 원격-로컬 인스턴스 동기화
    - git checkout -b $CI_COMMIT_BRANCH origin/$CI_COMMIT_BRANCH
    # new version document render & push
    - cd docs && git add .
    - mike deploy --branch ${PAGES_BRANCH} --push --update-aliases $DOC_VERSION latest
    # 보유하고 있는 모든 버전의 문서에 대해 사이트 루트로 이동하는 사람들이 최신 버전의 문서로 리디렉션 / 최초 한번만 실행되면 됨 -> allow-empty
    - mike set-default --branch ${PAGES_BRANCH} --push latest --allow-empty
    # checkout($PAGES_BRANCH) files in public/
    - git checkout ${PAGES_BRANCH}
  artifacts:
    paths:
      - public
  needs:
    - job: test-mkdocs
      artifacts: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
    - changes:
      - app/**/*
      when: never
    - if: '$CI_MERGE_REQUEST_ID == null'
      changes:
        - docs/**/*